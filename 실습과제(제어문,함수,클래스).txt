[클래스 기초 실습 문제] 
- 클래스 작성과 인스턴스 멤버/ 메서드 구현 및 호출 연습

1. Car class를 만들고 다음 멤버와 메서드를 구현하고 
   호출하는 코드를 구현해보세요
   클래스의 인스턴스 객체  sonata 를 만든다
   클래스의 모든 메서드를 호출해서 동작을 확인해본다

 <인스턴스 멤버>
 car_name : 자동차의 차종, 초기값은 '소나타'
 car_drv : 자동차의 구동 방식, 초기값은 '전륜'
            ('전륜', '후륜', '4륜'의 3가지)
 car_speed : 자동차의 속도, 초기 값은 0으로 설정
 car_direction : 자동차의 방향, 초기 값은 '앞쪽'으로 설정
                   ('왼쪽','오른쪽','앞쪽','뒤쪽','정지')
 car_fuel : 자동차의 연료, 초기 값은 '휘발유'
                   ('휘발유','경유','LPG','수소','전기','하이브리드')
 car_state : 자동차의 상태, 초기 값은 '정상' 
               ('정상', '브레이크고장', '전조등고장', '후미등고장', '연료부족',
                '타이어펑크', '엔진오일부족', '냉각수부족', '폐차요망')

 <메서드>
 __init__( )   : 생성자 함수 , 인스턴스 객체를 생성할 때 호출됨, 
                 '생성자 호출'  메시지가 출력 되도록한다
                 인스턴스 멤버 변수들의 초기화 값을 설정해준다

 set_car_name('산타페') : "차종이 [ 산타페 ]로 변경 되었습니다" , 
                               car_name 값을 변경
 get_car_name() : 설정된 차종(car_name) 을 반환

 set_car_drv('4륜') : "차의 구동 방식이 [ 4륜 ]으로 변경 되었습니다" 
                          car_drv 값을 변경
 get_car_drv() : 설정된 구동방식(car_drv) 을 반환

 set_car_fuel('전기') : "차의 연료 방식이 [ 전기 ]로 변경 되었습니다" 
                          car_fuel 값을 변경
 get_car_fuel() : 설정된 연료 방식(car_fuel) 을 반환

 set_car_state('브레이크고장') : "차의 상태가 [ 브레이크고장 ]으로 변경 되었습니다" 
                          car_state 값을 변경
 get_car_state() : 설정된 차의 상태(car_state) 를 반환

 set_speed(100)  : " 자동차의 속력이 시속 [ 100 ] km 로 변경되었습니다", 
                      car_speed 값을 변경
 get_speed()  : 설정된 자동차의 속도(car_speed )를 반환

 turn('오른쪽')   : " 자동차의 방향이  [ 오른쪽 ]으로 변경되었습니다"
	          car_direction의  값을 변경

 stop() :   "자동차가 정지 하였습니다"  
         car_direction의  값을 변경
	car_direction의  값을 [ 정지 ]로 변경
 
 start() :  "자동차가 시동이 걸렸습니다"

 move_forward(): "자동차가 [ 전진 ]합니다 속도는 [ 100 ]km입니다"
           속도값은 car_speed를 사용, car_direction의  값을  '앞쪽'으로 변경 
 move_backward() :"자동차가 [ 후진 ]합니다 속도는 [ 100 ] km 입니다"
           속도값은 car_speed를 사용, car_direction의  값을  '뒤쪽'으로 변경 

 __del__( )   : "[ 산타페 ] 자동차가 제거되었습니다"
                   소멸자 함수이며  car_name을 출력하고 
                   인스턴스 객체가 삭제될 때 자동으로 호출된다   


2. CarCenter  클래스를 만들고 다음 멤버변수와 메서드를 구현하고 
   호출하는 코드를 구현해보세요.  클래스의 인스턴스 객체  ct1 을 만든다
   각 메서드를 호출하여 결과를 확인한다 
   (1번 과제 완료 후에 2번 과제를 진행한다)

 <클래스 멤버>
  price : {'정상':10, '브레이크고장':1000, '전조등고장':2000, '후미등고장':3000, '연료부족':4000,
           '타이어펑크':5000, '엔진오일부족':6000, '냉각수부족':7000, '폐차처리':9000} 
           사전 사용

 <인스턴스 멤버>
 fix_cost : 수리비용, 초기 값은 0
 
 fixed_list : 수리내역을 사전에 저장한다, 초기값은 빈 사전
              { '산타페':'브레이크고장', '소나타':'전조등고장', ....}

 <메서드>
 __init__( )   : 생성자 함수 , 인스턴스 객체를 생성할 때 호출됨,
                 인스턴스 멤버 변수들의 초기화 값을 설정해준다

 fix_car(sonata) : Car 클래스의 인스턴스 객체를 인자로 받고 입력된 객체의
                   car_state값을 분석하여 수리를 진행한다, fix_cost값을 변경한다
	           fixed_list 에 추가한다
                   출력 "[ 산타페 ]의 [ 브레이크고장 ] 수리 완료, 비용은 [ 1000 ]원 입니다"

 set_car_drv(sonata,'후륜') : "차의 구동 방식이 [ 후륜 ]으로 변경 되었습니다" 
                              car_drv 값을 변경
 get_car_drv(sonata) : 설정된 구동방식(car_drv) 을 반환

 set_car_fuel(sonata,'전기') : "차의 연료 방식이 [ 전기 ]로 변경 되었습니다" 
                               car_fuel 값을 변경
 get_car_fuel(sonata) : 설정된 연료 방식(car_fuel) 을 반환

 get_fixed_list(sonata) :  수리내역과 비용을 알려준다, 
                           문자열로 완성해서 반환해준다--> '[브레이크고장] : [1000]원'

--------------------------------------------------------------------------------------------------------------------------------------------------


[ 클래스 활용 기본 실습 문제 ]

(문제마다 별도의 소스파일로 구현하세요)
1. 계산기 프로그램 (계산기 클래스 작성)  
   ( 1:'+', 2:'-', 3:'*', 4:'/', 0:end )
   
    <구현될 클래스>
    (1) Calculator 클래스  : calculate() 메소드를 구현 eval()을 사용 4칙 연산 수행    
     생성자에서 인스턴스 멤버를 하나 만들고 초기값을 { 1:'+', 2:'-', 3:'*', 4:'/' } 으로 설정
   
    (2) ControlCalculator 클래스 : 
          생성자에 Calculator 클래스의 인스턴스 객체를
          멤버로 만들어 놓고  calculate() 메소드를 구현 하여
          Calculator 클래스의 calculate() 메소드를 호출한다

    (3) ViewCalculator 클래스 :
          생성자에 ControlCalculator 클래스의 인스턴스 객체를
          멤버로 만들어 놓고  DisplayCalculator() 메소드를 구현 하여
          무한루프에서 수를 입력받아 ControlCalculator 클래스의 
          calculate() 메소드를 호출하여 결과를 print문으로 출력해준다	
    
    <메인 호출부분을 아래와 같이 구현한다>	
    if __name__ == '__main__':
        viewCalculator = ViewCalculator()
        viewCalculator.DisplayCalculator()
    
    <클래스의 메서드 호출 순서 정리>
    ViewCalculator 클래스의 DisplayCalculator() -->
    ControlCalculator 클래스의 calculate()  -->
    Calculator 클래스의 calculate() 메서드 순으로 호출된다
    

2. 학생 클래스를 이용하여 다음과 같이 출력하는 프로그램
   ( 학생수는 최대 10명이내에 대한 처리, 
     이름이 'end'이거나 학생수가 10명 일때 결과 출력 )
    
    Hong 50 50 50 150 50.0 Fail
    Kim  90 90 90 270 90.0 Excellent
    Nam  70 70 70 210 70.0

    <구현될 클래스>
  (1) Student 클래스 : 
    calculate() 메서드를 만들어 총점,평균,등급을 계산한다
    printStudentInfo() 메서드를 만들어 총점,평균,등급을 출력한다

  (2) ControlScoreTable 클래스 : 
    students 리스트 인스턴스 멤버를 만들고
    inputStudentInfo() 메서드를 만들어 students 리스트에 정보를 추가한다
    printScoreTable() 메서드를 만들어 Student 클래스의 printStudentInfo()
    메서드를 호출하여 총점,평균,등급을 출력한다

  (3) ViewScoreTable 클래스 :
    생성자에  ControlScoreTable 클래스 인스턴스 객체를
    멤버로 만들어 놓고 
    inputStudentInfo() 메서드를 만들고 무한 루프로 학생 이름과 성적을 입력받아
    네임드 튜플을 만들어서   ControlScoreTable 클래스의 inputStudentInfo()를 
    호출하여 students 리스트에 정보를 추가한다
    printScoreTable()메서드를 만들어  ControlScoreTable 클래스의 
    printScoreTable()를 호출하여 총점,평균,등급을 출력한다
    ViewMenu() 메서드에서 inputStudentInfo()와 printScoreTable()를 호출한다

    <메인 호출부분을 아래와 같이 구현한다>	
    if __name__ == '__main__':
        viewScoreTable = ViewScoreTable()
        viewScoreTable.ViewMenu()

    <클래스의 메서드 호출 순서 정리>
    ViewScoreTable 클래스의 ViewMenu() --> inputStudentInfo()-->
    Student 클래스의 생성자와
    ControlScoreTable 클래스의 inputStudentInfo()
    
    ViewScoreTable 클래스의 ViewMenu() --> printScoreTable() -->
    ControlScoreTable 클래스의 printScoreTable() -->
    Student 클래스의 printStudentInfo


--------------------------------------------------------------------------------------------------------------------------------------------------
[함수 추가 과제문제]

1. 키와 몸무게를 입력받아 비만도를 구하고 결과를 출력하시요(함수를 만드시요)
표준체중(kg)=(신장(cm)-100)×0.85
비만도(%)=현재체중/표준체중(%)×100

비만도가90%이하 -->저체중
90초과~110%     --> 정상
110초과~120%   --> 과체중
120%초과         -->  비만 

2. 연도를 입력받아 
1) 윤년여부를 출력하시요(함수를 만드시요)
윤년의 조건
 4로 나눠 떨어지지만 100으로 나눠 떨어지지 않아야 윤년이다 
 또는
 400 으로 나눠 떨어지면 윤년이다
 그외는 평년
2) 나이를 출력하시요(함수를 만드시요)
3) 띠(12지신)를 출력하시요(함수를 만드시요)
   ("쥐","소","호랑이","토끼","용","뱀","말","양","원숭이","닭","개","돼지",);
   (서기 4년은 쥐띠이다,2019년 돼지)
  
3. 점수를 입력받아
90~100 'A'
80~89 'B'
70~79 'C'
60~69 'D'
나머지 'F'
딕셔너리를 이용하여 구하시요(함수를 만드시요)

4. m(미터) 를 입력받아 마일로 변환하시요(함수를 만드시요)
   (1 mile =  1.609 meter)

5. 화씨 를 입력받아 섭씨로 변환하시요(함수를 만드시요)
   (celsius = ( fahrenheit - 32 ) / 1.8)
    
6. 하나의 정수를 입력받아 약수를 구하는 함수를 만드시요.
   (어떤 정수 n을 자연수 k로 나누어 나머지가 0 일경우 k는 정수 n의 약수이다)
   
7. 2개의 정수를 입력받아 절대값의 합을 구하는 함수를 만드시요
   ( abs()합수를 사용하지 않고 구현한다)
   
8. map 함수와 동일한 기능을 하는 mymap 함수를 구현하시요

<map()함수의 기능>
def multi_two(x):
    return x*2
result = map(multi_two,[1,2,3,4,5])
print(list(result))
출력 결과 :[2, 4, 6, 8, 10]

--------------------------------------------------------------------------------------------------------------------------------------------------

[ 제어문 실습과제 ]
 
<기본>
1. 1~100을 1줄에 10개씩 출력
   1.1 제어문만 이용하여 작성(시퀀스 자료형 사용안함)
   1.2 시퀀스 자료형을 이용하여 작성(list 내장)

2. 1~n 까지의 합을 출력 하는 프로그램(제어문 사용)

3. 1~n 까지 짝수합과 홀수합을 출력하는 프로그램
(제어문 사용)

4. 1~n 까지 3의 배수와 5의 배수를 제외한 수의 합을 
출력하는 프로그램(제어문 사용)

5. 구구단표 출력 프로그램
       5.1 제어문만 이용하여 작성(시퀀스 자료형 사용안함)
       5.2 리스트와 제어문을 이용하여 작성       

<중급>
	
6. -999가 입력 될 때 까지 정수를 입력 받은 후
양수/음수 개수와 양수일 때 짝수/홀수의 개수를
출력 하는 프로그램
   
7. 연산자 기호를 사전(dict)에 넣어 두고 두 개의 정수를 입력 받아서 사칙 연산하는 계산기 프로그램
  (계산방식은 1이면 '+', 2이면 '-', 3이면 '*', 4이면 '/', eval()함수를 사용)

<고급>
8. 다음과 같이 출력하는 프로그램
(10명이내 이며, 이름이 'end'이면 결과 출력)
(평균 90이상이면 Excellent,50이하이면 Fail출력)
 < namedtuple 사용>
    
    Hong 50 50 50 150 50.0 Fail
    Kim   90 90 90 270 90.0 Excellent
    Nam  70 70 70 210 70.0

--------------------------------------------------------------------------------------------------------------------------------------------------

﻿* 함수 구현 기본 실습
(함수원형)   printList(title,numberPerLine,prnList) 

(출력)            ( 힌트 ==> for x in prnList: 사용)
           'title :'
       0   1  2   3
       4   5  6   7 
       8   9 10 11
      12 13 14 15

 (호출예)
if __name__ == '__main__' :
    mylist = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
    printList('mynumber', 4, mylist)



[함수 실습과제]
<기본>
1. 두 개의 정수를 입력 받아 평균을 반환하는 함수를 작성 (첫 번째 수가 -1 이면 종료)

2. 입력 받은 내용을 리스트에 저장 후 리스트를 전달받아 최대값과 최소값을 반환하는 함수 작성 
(-1이 입력될 때 까지 입력 받아 리스트에 저장)

3. 함수의 인자로 시작과 끝 숫자를 받아 시작부터 끝까지의 모든 정수값의 합을 반환하는 함수를 
작성(시작값과 끝값을 포함).  (시작값이 끝값보다 클때 입력 종료)

4. 함수의 인자로 문자열을 포함하는 리스트가 입력될 때 각 문자열의 첫 세 글자로만 구성된 리스트를
   반환하는 함수를 작성. 예를 들어, 함수의 입력으로 ['Seoul', 'Daegu', 'Kwangju', 'Jeju']가 입력
   될 때 함수의 반환값은 ['Seo', 'Dae', 'Kwa', 'Jej']
   ('end' 입력시 입력 종료)
   
5. range() 함수 기능을 하는 myrange()  함수를 작성(인자가 1,2,3개인 경우를 모두구현  return 값은 튜플 )
 (range() 함수를 사용해도 무방, 단 인자 처리 코드는 반드시 구현)

<고급>
6. 화면에 다음과 같은 메뉴를 출력하여 선택된 메뉴의 기능(두수를 입력받아 연산)을 수행하는 프로그램
    1.add
    2.subtract
    3.multiply
    4.divide
    0.end
    select :
    
7. 다음과 같이 출력하는 프로그램을 함수로 작성(10명이내 이며, 이름이 'end'이면 결과 출력)
    Hong 50 50 50 150 50.0 Fail
    Kim  90 90 90 270 90.0 Excellent
    Nam  70 70 70 210 70.0
    
-구현될 함수: calcScore(), inputStudentInfo(), printScoreTable() 
calcScore() : 과목 리스트를 인자로 받아 총점,평균,등급을 구해서 반환
inputStudentInfo() : 성명 및 성적을 입력받고, calcScore()함수를 
           호출하고 named tupled을 만들어 학생 리스트에 저장한다
printScoreTable():학생 리스트내의 데이터를 화면에 출력한다                   